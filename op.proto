syntax = "proto3";
package deskDelta;
option go_package = "github.com/WriteDontThink/DeskDelta/definitions/go/deskdelta";


// Generically represent a start index and an end index
message IndexBoundary {
    int32 start = 8;
    int32 end = 9;
}

// Cursors being moved around
message CursorOperation{

    enum CursorOpType {
        MoveOneRight = 0;
        MoveOneLeft = 1;
        MoveToIndex = 2;
        Select = 3;
    }
    CursorOpType cursorOpType = 6;
    IndexBoundary cursorIndex = 10;
}

// Content being changed on the page
message ContentOperation{
    enum ContentOpType {
        InsertOne = 0;
        DeleteOne = 1;
        DeleteSelection = 2;
        InsertMany = 3;
    }
    ContentOpType contentOpType = 7;
    string data = 11;
}

// Users joining and leaving
message UserOperation {
    enum UserOpType {
        Connect = 0;
        Disconnect = 1;
    }
    UserOpType userOpType = 24;
    map<string, string> userInfo = 25;
}

// Pages being added and deleted
message PageOperation {
    enum PageOpType {
        Create = 0;
        Delete = 1;
    }
    PageOpType pageOpType = 26;
}


message MetaOperation {
    enum MetaOpType {
        Title = 0;
    }
    MetaOpType metaOpType = 27;
}

message FormatOperation {
    enum FormatOpType {
        Create = 0;
        Delete = 1;
    }
    enum FormatMessageVariant {
        Data = 0;
        Visual = 1;
    }
    enum FormatBoundary {
        Word = 0;
        Page = 1;
        Index = 2;
    }
    FormatOpType formatOpType = 12;
    FormatMessageVariant variant = 13;

    // A format can be tied to the end of the word (the client will automatically extend it to the next space),
    // to a given index, or to the end of a page.
    FormatBoundary boundaryType = 14;

    // If the format boundary is a word or an index, it can be represented by a start and end index. In the case
    // of an index, this will stay constant regardless of the content, but in the case of a word, it will be adapted
    // by space matching
    IndexBoundary boundaryData = 15;

    message DataFormat {
        // A unique identifier for a piece of data in the system. This can be looked
        // up by the client whenever needed.
        int32 dataId = 16;
    }
    message VisualFormat {
        // The name for a format, like "bold", or "font"
        string format = 17;
        // Any required attributes, like {"font-family": "Arial"}
        map<string, string> formatAttributes = 18;
    }
    oneof formatContent {
        DataFormat data = 19;
        VisualFormat visual = 20;
    }
}

message Operation {
    enum MessageType {
        CursorMessage = 0;
        ContentMessage = 1;
        UserMessage = 2;
        PageMessage = 3;
        MetaMessage = 4;
        FormatMessage = 5;
    }
    // The type of message that's been received
    MessageType messageType = 1;
    // What page the message occurred on
    int32 pageNum = 2;
    // What user created the message. (User 0 will be reserved for the server, all others will increment as they join
    int32 user = 3;
    // What content does the message contain?
    oneof messageContent {
        // An operation representing cursor movement
        CursorOperation cursorOp = 4;
        // An operation representing text being changed on the page
        ContentOperation contentOp = 5;

        // An operation representing text being formatted or tagged on the page
        FormatOperation formatOp = 12;

        // Put page, user, and meataoperations all in higher field nums, because they're less frequent
        // so bit conservation isn't really necessary

        // An operation representing a page being created or deleted
        PageOperation pageOp = 21;
        // An operation representing a user connecting or disconnecting to the document
        UserOperation userOp = 22;
        // An operation representing metadata, like the title of the document, changing on the page
        MetaOperation metaOp = 23;
    }
}