// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: op.proto

package deskdelta

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CursorOperation_CursorOpType int32

const (
	CursorOperation_MoveOneRight CursorOperation_CursorOpType = 0
	CursorOperation_MoveOneLeft  CursorOperation_CursorOpType = 1
	CursorOperation_MoveToIndex  CursorOperation_CursorOpType = 2
	CursorOperation_Select       CursorOperation_CursorOpType = 3
)

// Enum value maps for CursorOperation_CursorOpType.
var (
	CursorOperation_CursorOpType_name = map[int32]string{
		0: "MoveOneRight",
		1: "MoveOneLeft",
		2: "MoveToIndex",
		3: "Select",
	}
	CursorOperation_CursorOpType_value = map[string]int32{
		"MoveOneRight": 0,
		"MoveOneLeft":  1,
		"MoveToIndex":  2,
		"Select":       3,
	}
)

func (x CursorOperation_CursorOpType) Enum() *CursorOperation_CursorOpType {
	p := new(CursorOperation_CursorOpType)
	*p = x
	return p
}

func (x CursorOperation_CursorOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CursorOperation_CursorOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_op_proto_enumTypes[0].Descriptor()
}

func (CursorOperation_CursorOpType) Type() protoreflect.EnumType {
	return &file_op_proto_enumTypes[0]
}

func (x CursorOperation_CursorOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CursorOperation_CursorOpType.Descriptor instead.
func (CursorOperation_CursorOpType) EnumDescriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{1, 0}
}

type ContentOperation_ContentOpType int32

const (
	ContentOperation_InsertOne       ContentOperation_ContentOpType = 0
	ContentOperation_DeleteOne       ContentOperation_ContentOpType = 1
	ContentOperation_DeleteSelection ContentOperation_ContentOpType = 2
	ContentOperation_InsertMany      ContentOperation_ContentOpType = 3
)

// Enum value maps for ContentOperation_ContentOpType.
var (
	ContentOperation_ContentOpType_name = map[int32]string{
		0: "InsertOne",
		1: "DeleteOne",
		2: "DeleteSelection",
		3: "InsertMany",
	}
	ContentOperation_ContentOpType_value = map[string]int32{
		"InsertOne":       0,
		"DeleteOne":       1,
		"DeleteSelection": 2,
		"InsertMany":      3,
	}
)

func (x ContentOperation_ContentOpType) Enum() *ContentOperation_ContentOpType {
	p := new(ContentOperation_ContentOpType)
	*p = x
	return p
}

func (x ContentOperation_ContentOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentOperation_ContentOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_op_proto_enumTypes[1].Descriptor()
}

func (ContentOperation_ContentOpType) Type() protoreflect.EnumType {
	return &file_op_proto_enumTypes[1]
}

func (x ContentOperation_ContentOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentOperation_ContentOpType.Descriptor instead.
func (ContentOperation_ContentOpType) EnumDescriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{2, 0}
}

type UserOperation_UserOpType int32

const (
	UserOperation_Connect    UserOperation_UserOpType = 0
	UserOperation_Disconnect UserOperation_UserOpType = 1
)

// Enum value maps for UserOperation_UserOpType.
var (
	UserOperation_UserOpType_name = map[int32]string{
		0: "Connect",
		1: "Disconnect",
	}
	UserOperation_UserOpType_value = map[string]int32{
		"Connect":    0,
		"Disconnect": 1,
	}
)

func (x UserOperation_UserOpType) Enum() *UserOperation_UserOpType {
	p := new(UserOperation_UserOpType)
	*p = x
	return p
}

func (x UserOperation_UserOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserOperation_UserOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_op_proto_enumTypes[2].Descriptor()
}

func (UserOperation_UserOpType) Type() protoreflect.EnumType {
	return &file_op_proto_enumTypes[2]
}

func (x UserOperation_UserOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserOperation_UserOpType.Descriptor instead.
func (UserOperation_UserOpType) EnumDescriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{3, 0}
}

type PageOperation_PageOpType int32

const (
	PageOperation_Create PageOperation_PageOpType = 0
	PageOperation_Delete PageOperation_PageOpType = 1
)

// Enum value maps for PageOperation_PageOpType.
var (
	PageOperation_PageOpType_name = map[int32]string{
		0: "Create",
		1: "Delete",
	}
	PageOperation_PageOpType_value = map[string]int32{
		"Create": 0,
		"Delete": 1,
	}
)

func (x PageOperation_PageOpType) Enum() *PageOperation_PageOpType {
	p := new(PageOperation_PageOpType)
	*p = x
	return p
}

func (x PageOperation_PageOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PageOperation_PageOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_op_proto_enumTypes[3].Descriptor()
}

func (PageOperation_PageOpType) Type() protoreflect.EnumType {
	return &file_op_proto_enumTypes[3]
}

func (x PageOperation_PageOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PageOperation_PageOpType.Descriptor instead.
func (PageOperation_PageOpType) EnumDescriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{4, 0}
}

type MetaOperation_MetaOpType int32

const (
	MetaOperation_Title MetaOperation_MetaOpType = 0
)

// Enum value maps for MetaOperation_MetaOpType.
var (
	MetaOperation_MetaOpType_name = map[int32]string{
		0: "Title",
	}
	MetaOperation_MetaOpType_value = map[string]int32{
		"Title": 0,
	}
)

func (x MetaOperation_MetaOpType) Enum() *MetaOperation_MetaOpType {
	p := new(MetaOperation_MetaOpType)
	*p = x
	return p
}

func (x MetaOperation_MetaOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaOperation_MetaOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_op_proto_enumTypes[4].Descriptor()
}

func (MetaOperation_MetaOpType) Type() protoreflect.EnumType {
	return &file_op_proto_enumTypes[4]
}

func (x MetaOperation_MetaOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetaOperation_MetaOpType.Descriptor instead.
func (MetaOperation_MetaOpType) EnumDescriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{5, 0}
}

type FormatOperation_FormatOpType int32

const (
	FormatOperation_Create FormatOperation_FormatOpType = 0
	FormatOperation_Delete FormatOperation_FormatOpType = 1
)

// Enum value maps for FormatOperation_FormatOpType.
var (
	FormatOperation_FormatOpType_name = map[int32]string{
		0: "Create",
		1: "Delete",
	}
	FormatOperation_FormatOpType_value = map[string]int32{
		"Create": 0,
		"Delete": 1,
	}
)

func (x FormatOperation_FormatOpType) Enum() *FormatOperation_FormatOpType {
	p := new(FormatOperation_FormatOpType)
	*p = x
	return p
}

func (x FormatOperation_FormatOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormatOperation_FormatOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_op_proto_enumTypes[5].Descriptor()
}

func (FormatOperation_FormatOpType) Type() protoreflect.EnumType {
	return &file_op_proto_enumTypes[5]
}

func (x FormatOperation_FormatOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormatOperation_FormatOpType.Descriptor instead.
func (FormatOperation_FormatOpType) EnumDescriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{6, 0}
}

type FormatOperation_FormatMessageVariant int32

const (
	FormatOperation_Data   FormatOperation_FormatMessageVariant = 0
	FormatOperation_Visual FormatOperation_FormatMessageVariant = 1
)

// Enum value maps for FormatOperation_FormatMessageVariant.
var (
	FormatOperation_FormatMessageVariant_name = map[int32]string{
		0: "Data",
		1: "Visual",
	}
	FormatOperation_FormatMessageVariant_value = map[string]int32{
		"Data":   0,
		"Visual": 1,
	}
)

func (x FormatOperation_FormatMessageVariant) Enum() *FormatOperation_FormatMessageVariant {
	p := new(FormatOperation_FormatMessageVariant)
	*p = x
	return p
}

func (x FormatOperation_FormatMessageVariant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormatOperation_FormatMessageVariant) Descriptor() protoreflect.EnumDescriptor {
	return file_op_proto_enumTypes[6].Descriptor()
}

func (FormatOperation_FormatMessageVariant) Type() protoreflect.EnumType {
	return &file_op_proto_enumTypes[6]
}

func (x FormatOperation_FormatMessageVariant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormatOperation_FormatMessageVariant.Descriptor instead.
func (FormatOperation_FormatMessageVariant) EnumDescriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{6, 1}
}

type FormatOperation_FormatBoundary int32

const (
	FormatOperation_Word  FormatOperation_FormatBoundary = 0
	FormatOperation_Page  FormatOperation_FormatBoundary = 1
	FormatOperation_Index FormatOperation_FormatBoundary = 2
)

// Enum value maps for FormatOperation_FormatBoundary.
var (
	FormatOperation_FormatBoundary_name = map[int32]string{
		0: "Word",
		1: "Page",
		2: "Index",
	}
	FormatOperation_FormatBoundary_value = map[string]int32{
		"Word":  0,
		"Page":  1,
		"Index": 2,
	}
)

func (x FormatOperation_FormatBoundary) Enum() *FormatOperation_FormatBoundary {
	p := new(FormatOperation_FormatBoundary)
	*p = x
	return p
}

func (x FormatOperation_FormatBoundary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormatOperation_FormatBoundary) Descriptor() protoreflect.EnumDescriptor {
	return file_op_proto_enumTypes[7].Descriptor()
}

func (FormatOperation_FormatBoundary) Type() protoreflect.EnumType {
	return &file_op_proto_enumTypes[7]
}

func (x FormatOperation_FormatBoundary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormatOperation_FormatBoundary.Descriptor instead.
func (FormatOperation_FormatBoundary) EnumDescriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{6, 2}
}

type Operation_MessageType int32

const (
	Operation_CursorMessage  Operation_MessageType = 0
	Operation_ContentMessage Operation_MessageType = 1
	Operation_UserMessage    Operation_MessageType = 2
	Operation_PageMessage    Operation_MessageType = 3
	Operation_MetaMessage    Operation_MessageType = 4
	Operation_FormatMessage  Operation_MessageType = 5
)

// Enum value maps for Operation_MessageType.
var (
	Operation_MessageType_name = map[int32]string{
		0: "CursorMessage",
		1: "ContentMessage",
		2: "UserMessage",
		3: "PageMessage",
		4: "MetaMessage",
		5: "FormatMessage",
	}
	Operation_MessageType_value = map[string]int32{
		"CursorMessage":  0,
		"ContentMessage": 1,
		"UserMessage":    2,
		"PageMessage":    3,
		"MetaMessage":    4,
		"FormatMessage":  5,
	}
)

func (x Operation_MessageType) Enum() *Operation_MessageType {
	p := new(Operation_MessageType)
	*p = x
	return p
}

func (x Operation_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_op_proto_enumTypes[8].Descriptor()
}

func (Operation_MessageType) Type() protoreflect.EnumType {
	return &file_op_proto_enumTypes[8]
}

func (x Operation_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation_MessageType.Descriptor instead.
func (Operation_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{7, 0}
}

// Generically represent a start index and an end index
type IndexBoundary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,8,opt,name=start,proto3" json:"start,omitempty"`
	End   int32 `protobuf:"varint,9,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *IndexBoundary) Reset() {
	*x = IndexBoundary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexBoundary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBoundary) ProtoMessage() {}

func (x *IndexBoundary) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBoundary.ProtoReflect.Descriptor instead.
func (*IndexBoundary) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{0}
}

func (x *IndexBoundary) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *IndexBoundary) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

// Cursors being moved around
type CursorOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CursorOpType CursorOperation_CursorOpType `protobuf:"varint,6,opt,name=cursorOpType,proto3,enum=deskDelta.CursorOperation_CursorOpType" json:"cursorOpType,omitempty"`
	CursorIndex  *IndexBoundary               `protobuf:"bytes,10,opt,name=cursorIndex,proto3" json:"cursorIndex,omitempty"`
}

func (x *CursorOperation) Reset() {
	*x = CursorOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorOperation) ProtoMessage() {}

func (x *CursorOperation) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorOperation.ProtoReflect.Descriptor instead.
func (*CursorOperation) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{1}
}

func (x *CursorOperation) GetCursorOpType() CursorOperation_CursorOpType {
	if x != nil {
		return x.CursorOpType
	}
	return CursorOperation_MoveOneRight
}

func (x *CursorOperation) GetCursorIndex() *IndexBoundary {
	if x != nil {
		return x.CursorIndex
	}
	return nil
}

// Content being changed on the page
type ContentOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentOpType ContentOperation_ContentOpType `protobuf:"varint,7,opt,name=contentOpType,proto3,enum=deskDelta.ContentOperation_ContentOpType" json:"contentOpType,omitempty"`
	Data          string                         `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ContentOperation) Reset() {
	*x = ContentOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentOperation) ProtoMessage() {}

func (x *ContentOperation) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentOperation.ProtoReflect.Descriptor instead.
func (*ContentOperation) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{2}
}

func (x *ContentOperation) GetContentOpType() ContentOperation_ContentOpType {
	if x != nil {
		return x.ContentOpType
	}
	return ContentOperation_InsertOne
}

func (x *ContentOperation) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Users joining and leaving
type UserOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserOpType UserOperation_UserOpType `protobuf:"varint,24,opt,name=userOpType,proto3,enum=deskDelta.UserOperation_UserOpType" json:"userOpType,omitempty"`
	UserInfo   map[string]string        `protobuf:"bytes,25,rep,name=userInfo,proto3" json:"userInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserOperation) Reset() {
	*x = UserOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOperation) ProtoMessage() {}

func (x *UserOperation) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOperation.ProtoReflect.Descriptor instead.
func (*UserOperation) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{3}
}

func (x *UserOperation) GetUserOpType() UserOperation_UserOpType {
	if x != nil {
		return x.UserOpType
	}
	return UserOperation_Connect
}

func (x *UserOperation) GetUserInfo() map[string]string {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// Pages being added and deleted
type PageOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageOpType PageOperation_PageOpType `protobuf:"varint,26,opt,name=pageOpType,proto3,enum=deskDelta.PageOperation_PageOpType" json:"pageOpType,omitempty"`
}

func (x *PageOperation) Reset() {
	*x = PageOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageOperation) ProtoMessage() {}

func (x *PageOperation) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageOperation.ProtoReflect.Descriptor instead.
func (*PageOperation) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{4}
}

func (x *PageOperation) GetPageOpType() PageOperation_PageOpType {
	if x != nil {
		return x.PageOpType
	}
	return PageOperation_Create
}

type MetaOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetaOpType MetaOperation_MetaOpType `protobuf:"varint,27,opt,name=metaOpType,proto3,enum=deskDelta.MetaOperation_MetaOpType" json:"metaOpType,omitempty"`
}

func (x *MetaOperation) Reset() {
	*x = MetaOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaOperation) ProtoMessage() {}

func (x *MetaOperation) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaOperation.ProtoReflect.Descriptor instead.
func (*MetaOperation) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{5}
}

func (x *MetaOperation) GetMetaOpType() MetaOperation_MetaOpType {
	if x != nil {
		return x.MetaOpType
	}
	return MetaOperation_Title
}

type FormatOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatOpType FormatOperation_FormatOpType         `protobuf:"varint,12,opt,name=formatOpType,proto3,enum=deskDelta.FormatOperation_FormatOpType" json:"formatOpType,omitempty"`
	Variant      FormatOperation_FormatMessageVariant `protobuf:"varint,13,opt,name=variant,proto3,enum=deskDelta.FormatOperation_FormatMessageVariant" json:"variant,omitempty"`
	// A format can be tied to the end of the word (the client will automatically extend it to the next space),
	// to a given index, or to the end of a page.
	BoundaryType FormatOperation_FormatBoundary `protobuf:"varint,14,opt,name=boundaryType,proto3,enum=deskDelta.FormatOperation_FormatBoundary" json:"boundaryType,omitempty"`
	// If the format boundary is a word or an index, it can be represented by a start and end index. In the case
	// of an index, this will stay constant regardless of the content, but in the case of a word, it will be adapted
	// by space matching
	BoundaryData *IndexBoundary `protobuf:"bytes,15,opt,name=boundaryData,proto3" json:"boundaryData,omitempty"`
	// Types that are assignable to FormatContent:
	//	*FormatOperation_Data
	//	*FormatOperation_Visual
	FormatContent isFormatOperation_FormatContent `protobuf_oneof:"formatContent"`
}

func (x *FormatOperation) Reset() {
	*x = FormatOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatOperation) ProtoMessage() {}

func (x *FormatOperation) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatOperation.ProtoReflect.Descriptor instead.
func (*FormatOperation) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{6}
}

func (x *FormatOperation) GetFormatOpType() FormatOperation_FormatOpType {
	if x != nil {
		return x.FormatOpType
	}
	return FormatOperation_Create
}

func (x *FormatOperation) GetVariant() FormatOperation_FormatMessageVariant {
	if x != nil {
		return x.Variant
	}
	return FormatOperation_Data
}

func (x *FormatOperation) GetBoundaryType() FormatOperation_FormatBoundary {
	if x != nil {
		return x.BoundaryType
	}
	return FormatOperation_Word
}

func (x *FormatOperation) GetBoundaryData() *IndexBoundary {
	if x != nil {
		return x.BoundaryData
	}
	return nil
}

func (m *FormatOperation) GetFormatContent() isFormatOperation_FormatContent {
	if m != nil {
		return m.FormatContent
	}
	return nil
}

func (x *FormatOperation) GetData() *FormatOperation_DataFormat {
	if x, ok := x.GetFormatContent().(*FormatOperation_Data); ok {
		return x.Data
	}
	return nil
}

func (x *FormatOperation) GetVisual() *FormatOperation_VisualFormat {
	if x, ok := x.GetFormatContent().(*FormatOperation_Visual); ok {
		return x.Visual
	}
	return nil
}

type isFormatOperation_FormatContent interface {
	isFormatOperation_FormatContent()
}

type FormatOperation_Data struct {
	Data *FormatOperation_DataFormat `protobuf:"bytes,19,opt,name=data,proto3,oneof"`
}

type FormatOperation_Visual struct {
	Visual *FormatOperation_VisualFormat `protobuf:"bytes,20,opt,name=visual,proto3,oneof"`
}

func (*FormatOperation_Data) isFormatOperation_FormatContent() {}

func (*FormatOperation_Visual) isFormatOperation_FormatContent() {}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of message that's been received
	MessageType Operation_MessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=deskDelta.Operation_MessageType" json:"messageType,omitempty"`
	// What page the message occurred on
	PageNum int32 `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// What user created the message. (User 0 will be reserved for the server, all others will increment as they join
	User int32 `protobuf:"varint,3,opt,name=user,proto3" json:"user,omitempty"`
	// What content does the message contain?
	//
	// Types that are assignable to MessageContent:
	//	*Operation_CursorOp
	//	*Operation_ContentOp
	//	*Operation_FormatOp
	//	*Operation_PageOp
	//	*Operation_UserOp
	//	*Operation_MetaOp
	MessageContent isOperation_MessageContent `protobuf_oneof:"messageContent"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{7}
}

func (x *Operation) GetMessageType() Operation_MessageType {
	if x != nil {
		return x.MessageType
	}
	return Operation_CursorMessage
}

func (x *Operation) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *Operation) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (m *Operation) GetMessageContent() isOperation_MessageContent {
	if m != nil {
		return m.MessageContent
	}
	return nil
}

func (x *Operation) GetCursorOp() *CursorOperation {
	if x, ok := x.GetMessageContent().(*Operation_CursorOp); ok {
		return x.CursorOp
	}
	return nil
}

func (x *Operation) GetContentOp() *ContentOperation {
	if x, ok := x.GetMessageContent().(*Operation_ContentOp); ok {
		return x.ContentOp
	}
	return nil
}

func (x *Operation) GetFormatOp() *FormatOperation {
	if x, ok := x.GetMessageContent().(*Operation_FormatOp); ok {
		return x.FormatOp
	}
	return nil
}

func (x *Operation) GetPageOp() *PageOperation {
	if x, ok := x.GetMessageContent().(*Operation_PageOp); ok {
		return x.PageOp
	}
	return nil
}

func (x *Operation) GetUserOp() *UserOperation {
	if x, ok := x.GetMessageContent().(*Operation_UserOp); ok {
		return x.UserOp
	}
	return nil
}

func (x *Operation) GetMetaOp() *MetaOperation {
	if x, ok := x.GetMessageContent().(*Operation_MetaOp); ok {
		return x.MetaOp
	}
	return nil
}

type isOperation_MessageContent interface {
	isOperation_MessageContent()
}

type Operation_CursorOp struct {
	// An operation representing cursor movement
	CursorOp *CursorOperation `protobuf:"bytes,4,opt,name=cursorOp,proto3,oneof"`
}

type Operation_ContentOp struct {
	// An operation representing text being changed on the page
	ContentOp *ContentOperation `protobuf:"bytes,5,opt,name=contentOp,proto3,oneof"`
}

type Operation_FormatOp struct {
	// An operation representing text being formatted or tagged on the page
	FormatOp *FormatOperation `protobuf:"bytes,12,opt,name=formatOp,proto3,oneof"`
}

type Operation_PageOp struct {
	// An operation representing a page being created or deleted
	PageOp *PageOperation `protobuf:"bytes,21,opt,name=pageOp,proto3,oneof"`
}

type Operation_UserOp struct {
	// An operation representing a user connecting or disconnecting to the document
	UserOp *UserOperation `protobuf:"bytes,22,opt,name=userOp,proto3,oneof"`
}

type Operation_MetaOp struct {
	// An operation representing metadata, like the title of the document, changing on the page
	MetaOp *MetaOperation `protobuf:"bytes,23,opt,name=metaOp,proto3,oneof"`
}

func (*Operation_CursorOp) isOperation_MessageContent() {}

func (*Operation_ContentOp) isOperation_MessageContent() {}

func (*Operation_FormatOp) isOperation_MessageContent() {}

func (*Operation_PageOp) isOperation_MessageContent() {}

func (*Operation_UserOp) isOperation_MessageContent() {}

func (*Operation_MetaOp) isOperation_MessageContent() {}

type FormatOperation_DataFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for a piece of data in the system. This can be looked
	// up by the client whenever needed.
	DataId int32 `protobuf:"varint,16,opt,name=dataId,proto3" json:"dataId,omitempty"`
}

func (x *FormatOperation_DataFormat) Reset() {
	*x = FormatOperation_DataFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatOperation_DataFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatOperation_DataFormat) ProtoMessage() {}

func (x *FormatOperation_DataFormat) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatOperation_DataFormat.ProtoReflect.Descriptor instead.
func (*FormatOperation_DataFormat) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{6, 0}
}

func (x *FormatOperation_DataFormat) GetDataId() int32 {
	if x != nil {
		return x.DataId
	}
	return 0
}

type FormatOperation_VisualFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name for a format, like "bold", or "font"
	Format string `protobuf:"bytes,17,opt,name=format,proto3" json:"format,omitempty"`
	// Any required attributes, like {"font-family": "Arial"}
	FormatAttributes map[string]string `protobuf:"bytes,18,rep,name=formatAttributes,proto3" json:"formatAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FormatOperation_VisualFormat) Reset() {
	*x = FormatOperation_VisualFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_op_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatOperation_VisualFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatOperation_VisualFormat) ProtoMessage() {}

func (x *FormatOperation_VisualFormat) ProtoReflect() protoreflect.Message {
	mi := &file_op_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatOperation_VisualFormat.ProtoReflect.Descriptor instead.
func (*FormatOperation_VisualFormat) Descriptor() ([]byte, []int) {
	return file_op_proto_rawDescGZIP(), []int{6, 1}
}

func (x *FormatOperation_VisualFormat) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *FormatOperation_VisualFormat) GetFormatAttributes() map[string]string {
	if x != nil {
		return x.FormatAttributes
	}
	return nil
}

var File_op_proto protoreflect.FileDescriptor

var file_op_proto_rawDesc = []byte{
	0x0a, 0x08, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x65, 0x73, 0x6b,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xea,
	0x01, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4e, 0x0a, 0x0c, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x03, 0x22, 0xcb, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x4f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x10, 0x03, 0x22, 0x80, 0x02, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x42, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x29, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x01, 0x22, 0x7a, 0x0a, 0x0d,
	0x50, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x22, 0x6d, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x65, 0x74,
	0x61, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x17,
	0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x10, 0x00, 0x22, 0xcd, 0x06, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64, 0x65, 0x73, 0x6b,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x64, 0x65, 0x73, 0x6b,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x52, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a,
	0x06, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x06, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x1a, 0x24, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x1a, 0xd6, 0x01, 0x0a, 0x0c, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x69, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x65, 0x73, 0x6b,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x26, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x22, 0x2c, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd8, 0x04, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x64, 0x65, 0x73,
	0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x4f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x73, 0x6b,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4f,
	0x70, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x12, 0x38,
	0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x12, 0x32, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x70,
	0x12, 0x32, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x61, 0x4f, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x61, 0x4f, 0x70, 0x22, 0x7a, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x65, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x05,
	0x42, 0x10, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6e, 0x74, 0x54, 0x68, 0x69, 0x6e, 0x6b, 0x2f,
	0x44, 0x65, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_op_proto_rawDescOnce sync.Once
	file_op_proto_rawDescData = file_op_proto_rawDesc
)

func file_op_proto_rawDescGZIP() []byte {
	file_op_proto_rawDescOnce.Do(func() {
		file_op_proto_rawDescData = protoimpl.X.CompressGZIP(file_op_proto_rawDescData)
	})
	return file_op_proto_rawDescData
}

var file_op_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_op_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_op_proto_goTypes = []interface{}{
	(CursorOperation_CursorOpType)(0),         // 0: deskDelta.CursorOperation.CursorOpType
	(ContentOperation_ContentOpType)(0),       // 1: deskDelta.ContentOperation.ContentOpType
	(UserOperation_UserOpType)(0),             // 2: deskDelta.UserOperation.UserOpType
	(PageOperation_PageOpType)(0),             // 3: deskDelta.PageOperation.PageOpType
	(MetaOperation_MetaOpType)(0),             // 4: deskDelta.MetaOperation.MetaOpType
	(FormatOperation_FormatOpType)(0),         // 5: deskDelta.FormatOperation.FormatOpType
	(FormatOperation_FormatMessageVariant)(0), // 6: deskDelta.FormatOperation.FormatMessageVariant
	(FormatOperation_FormatBoundary)(0),       // 7: deskDelta.FormatOperation.FormatBoundary
	(Operation_MessageType)(0),                // 8: deskDelta.Operation.MessageType
	(*IndexBoundary)(nil),                     // 9: deskDelta.IndexBoundary
	(*CursorOperation)(nil),                   // 10: deskDelta.CursorOperation
	(*ContentOperation)(nil),                  // 11: deskDelta.ContentOperation
	(*UserOperation)(nil),                     // 12: deskDelta.UserOperation
	(*PageOperation)(nil),                     // 13: deskDelta.PageOperation
	(*MetaOperation)(nil),                     // 14: deskDelta.MetaOperation
	(*FormatOperation)(nil),                   // 15: deskDelta.FormatOperation
	(*Operation)(nil),                         // 16: deskDelta.Operation
	nil,                                       // 17: deskDelta.UserOperation.UserInfoEntry
	(*FormatOperation_DataFormat)(nil),        // 18: deskDelta.FormatOperation.DataFormat
	(*FormatOperation_VisualFormat)(nil),      // 19: deskDelta.FormatOperation.VisualFormat
	nil,                                       // 20: deskDelta.FormatOperation.VisualFormat.FormatAttributesEntry
}
var file_op_proto_depIdxs = []int32{
	0,  // 0: deskDelta.CursorOperation.cursorOpType:type_name -> deskDelta.CursorOperation.CursorOpType
	9,  // 1: deskDelta.CursorOperation.cursorIndex:type_name -> deskDelta.IndexBoundary
	1,  // 2: deskDelta.ContentOperation.contentOpType:type_name -> deskDelta.ContentOperation.ContentOpType
	2,  // 3: deskDelta.UserOperation.userOpType:type_name -> deskDelta.UserOperation.UserOpType
	17, // 4: deskDelta.UserOperation.userInfo:type_name -> deskDelta.UserOperation.UserInfoEntry
	3,  // 5: deskDelta.PageOperation.pageOpType:type_name -> deskDelta.PageOperation.PageOpType
	4,  // 6: deskDelta.MetaOperation.metaOpType:type_name -> deskDelta.MetaOperation.MetaOpType
	5,  // 7: deskDelta.FormatOperation.formatOpType:type_name -> deskDelta.FormatOperation.FormatOpType
	6,  // 8: deskDelta.FormatOperation.variant:type_name -> deskDelta.FormatOperation.FormatMessageVariant
	7,  // 9: deskDelta.FormatOperation.boundaryType:type_name -> deskDelta.FormatOperation.FormatBoundary
	9,  // 10: deskDelta.FormatOperation.boundaryData:type_name -> deskDelta.IndexBoundary
	18, // 11: deskDelta.FormatOperation.data:type_name -> deskDelta.FormatOperation.DataFormat
	19, // 12: deskDelta.FormatOperation.visual:type_name -> deskDelta.FormatOperation.VisualFormat
	8,  // 13: deskDelta.Operation.messageType:type_name -> deskDelta.Operation.MessageType
	10, // 14: deskDelta.Operation.cursorOp:type_name -> deskDelta.CursorOperation
	11, // 15: deskDelta.Operation.contentOp:type_name -> deskDelta.ContentOperation
	15, // 16: deskDelta.Operation.formatOp:type_name -> deskDelta.FormatOperation
	13, // 17: deskDelta.Operation.pageOp:type_name -> deskDelta.PageOperation
	12, // 18: deskDelta.Operation.userOp:type_name -> deskDelta.UserOperation
	14, // 19: deskDelta.Operation.metaOp:type_name -> deskDelta.MetaOperation
	20, // 20: deskDelta.FormatOperation.VisualFormat.formatAttributes:type_name -> deskDelta.FormatOperation.VisualFormat.FormatAttributesEntry
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_op_proto_init() }
func file_op_proto_init() {
	if File_op_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_op_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexBoundary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_op_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CursorOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_op_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_op_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_op_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_op_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_op_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_op_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_op_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatOperation_DataFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_op_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatOperation_VisualFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_op_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*FormatOperation_Data)(nil),
		(*FormatOperation_Visual)(nil),
	}
	file_op_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Operation_CursorOp)(nil),
		(*Operation_ContentOp)(nil),
		(*Operation_FormatOp)(nil),
		(*Operation_PageOp)(nil),
		(*Operation_UserOp)(nil),
		(*Operation_MetaOp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_op_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_op_proto_goTypes,
		DependencyIndexes: file_op_proto_depIdxs,
		EnumInfos:         file_op_proto_enumTypes,
		MessageInfos:      file_op_proto_msgTypes,
	}.Build()
	File_op_proto = out.File
	file_op_proto_rawDesc = nil
	file_op_proto_goTypes = nil
	file_op_proto_depIdxs = nil
}
